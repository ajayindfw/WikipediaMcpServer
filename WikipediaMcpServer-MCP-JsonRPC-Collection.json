{
	"info": {
		"_postman_id": "wikipedia-mcp-jsonrpc-collection",
		"name": "Wikipedia MCP Server - JSON-RPC 2.0 API Testing Collection",
		"description": "Comprehensive testing collection for Wikipedia MCP Server using JSON-RPC 2.0 protocol over HTTP - Compatible with Microsoft ModelContextProtocol SDK v0.4.0-preview.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "wikipedia-mcp-server-jsonrpc"
	},
	"item": [
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});",
									"",
									"pm.test(\"Response has timestamp\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Health check endpoint to verify the server is running"
					},
					"response": []
				},
				{
					"name": "Server Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has server info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('framework');",
									"    pm.expect(jsonData.framework).to.include('Microsoft ModelContextProtocol');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							]
						},
						"description": "Server information endpoint showing MCP server details"
					},
					"response": []
				}
			],
			"description": "Health check and server info endpoints"
		},
		{
			"name": "MCP Protocol Tests",
			"item": [
				{
					"name": "MCP Initialize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is SSE format\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
									"});",
									"",
									"pm.test(\"Response is JSON-RPC 2.0\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.not.be.null;",
									"    pm.expect(jsonData).to.have.property('jsonrpc');",
									"    pm.expect(jsonData.jsonrpc).to.eql('2.0');",
									"});",
									"",
									"pm.test(\"Response has correct ID\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Response has result with capabilities\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.have.property('result');",
									"    pm.expect(jsonData.result).to.have.property('capabilities');",
									"    pm.expect(jsonData.result).to.have.property('serverInfo');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {},\n    \"clientInfo\": {\n      \"name\": \"Postman\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "MCP protocol initialization handshake"
					},
					"response": []
				},
				{
					"name": "MCP List Tools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON-RPC 2.0\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.not.be.null;",
									"    pm.expect(jsonData).to.have.property('jsonrpc');",
									"    pm.expect(jsonData.jsonrpc).to.eql('2.0');",
									"});",
									"",
									"pm.test(\"Response has tools array\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.have.property('result');",
									"    pm.expect(jsonData.result).to.have.property('tools');",
									"    pm.expect(jsonData.result.tools).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Wikipedia tools are present\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    var toolNames = jsonData.result.tools.map(tool => tool.name);",
									"    pm.expect(toolNames).to.include('wikipedia_search');",
									"    pm.expect(toolNames).to.include('wikipedia_sections');",
									"    pm.expect(toolNames).to.include('wikipedia_section_content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/list\",\n  \"params\": {}\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "List all available MCP tools"
					},
					"response": []
				}
			],
			"description": "Basic MCP protocol functionality tests"
		},
		{
			"name": "Wikipedia Search Tool",
			"item": [
				{
					"name": "Search - Artificial Intelligence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON-RPC 2.0\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.not.be.null;",
									"    pm.expect(jsonData).to.have.property('jsonrpc');",
									"    pm.expect(jsonData.jsonrpc).to.eql('2.0');",
									"});",
									"",
									"pm.test(\"Response has search result content\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.have.property('result');",
									"    pm.expect(jsonData.result).to.have.property('content');",
									"    pm.expect(jsonData.result.content[0].text).to.include('Artificial');",
									"});",
									"",
									"pm.test(\"Search result contains Wikipedia URL\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData.result.content[0].text).to.include('wikipedia.org');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_search\",\n    \"arguments\": {\n      \"query\": \"Artificial intelligence\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Search Wikipedia for 'Artificial intelligence' using MCP tools/call"
					},
					"response": []
				},
				{
					"name": "Search - Python Programming",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains Python content\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData.result.content[0].text.toLowerCase()).to.include('python');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_search\",\n    \"arguments\": {\n      \"query\": \"Python programming language\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Search Wikipedia for Python programming language"
					},
					"response": []
				},
				{
					"name": "Search - Invalid Query (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200 (JSON-RPC error in response)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains error or no results message\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.not.be.null;",
									"    // Could be an error field or a result with \"No Wikipedia articles found\"",
									"    var hasError = jsonData.error || (jsonData.result && jsonData.result.content[0].text.includes('No Wikipedia articles found'));",
									"    pm.expect(hasError).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_search\",\n    \"arguments\": {\n      \"query\": \"\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Test error handling for empty search query"
					},
					"response": []
				}
			],
			"description": "Wikipedia search tool tests using JSON-RPC 2.0 protocol"
		},
		{
			"name": "Wikipedia Sections Tool",
			"item": [
				{
					"name": "Get Sections - Machine Learning",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON-RPC 2.0\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.not.be.null;",
									"    pm.expect(jsonData).to.have.property('jsonrpc');",
									"    pm.expect(jsonData.jsonrpc).to.eql('2.0');",
									"});",
									"",
									"pm.test(\"Response contains sections\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData.result.content[0].text).to.include('sections');",
									"    pm.expect(jsonData.result.content[0].text).to.include('Machine learning');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_sections\",\n    \"arguments\": {\n      \"topic\": \"Machine learning\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get sections for Machine learning Wikipedia page"
					},
					"response": []
				},
				{
					"name": "Get Sections - Artificial Intelligence",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 7,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_sections\",\n    \"arguments\": {\n      \"topic\": \"Artificial intelligence\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get sections for Artificial intelligence Wikipedia page"
					},
					"response": []
				}
			],
			"description": "Wikipedia sections tool tests using JSON-RPC 2.0 protocol"
		},
		{
			"name": "Wikipedia Section Content Tool",
			"item": [
				{
					"name": "Get Section Content - AI Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains section content\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.not.be.null;",
									"    pm.expect(jsonData.result.content[0].text).to.include('Content from section');",
									"    pm.expect(jsonData.result.content[0].text).to.include('Overview');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 8,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_section_content\",\n    \"arguments\": {\n      \"topic\": \"Artificial intelligence\",\n      \"sectionTitle\": \"Overview\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get Overview section content from Artificial intelligence page"
					},
					"response": []
				},
				{
					"name": "Get Section Content - Python History",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 9,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_section_content\",\n    \"arguments\": {\n      \"topic\": \"Python (programming language)\",\n      \"sectionTitle\": \"History\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get History section content from Python programming language page"
					},
					"response": []
				},
				{
					"name": "Get Section Content - Nonexistent Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Helper function to parse SSE format responses",
									"function parseSSE(responseText) {",
									"    const lines = responseText.split('\\n');",
									"    for (let line of lines) {",
									"        if (line.startsWith('data: ')) {",
									"            return JSON.parse(line.substring(6));",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates section not found\", function () {",
									"    var jsonData = parseSSE(pm.response.text());",
									"    pm.expect(jsonData).to.not.be.null;",
									"    pm.expect(jsonData.result.content[0].text.toLowerCase()).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 10,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"wikipedia_section_content\",\n    \"arguments\": {\n      \"topic\": \"Python (programming language)\",\n      \"sectionTitle\": \"NonexistentSection12345\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Test behavior when requesting a section that doesn't exist"
					},
					"response": []
				}
			],
			"description": "Wikipedia section content tool tests using JSON-RPC 2.0 protocol"
		},
		{
			"name": "Complete Workflow Tests",
			"item": [
				{
					"name": "Workflow: Initialize → List Tools → Search → Sections → Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This represents the complete MCP workflow",
									"pm.test(\"Complete MCP workflow test placeholder\", function () {",
									"    pm.expect(true).to.be.true;",
									"});",
									"",
									"// Instructions for manual workflow testing:",
									"// 1. Run 'MCP Initialize' request",
									"// 2. Run 'MCP List Tools' request",
									"// 3. Run 'Search - Artificial Intelligence' request",
									"// 4. Run 'Get Sections - Artificial Intelligence' request", 
									"// 5. Run 'Get Section Content - AI Overview' request",
									"// 6. Verify the complete MCP data flow works end-to-end"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Placeholder for complete MCP workflow testing. Run the individual JSON-RPC requests in sequence to test the full MCP protocol flow."
					},
					"response": []
				}
			],
			"description": "End-to-end MCP workflow tests representing the complete user journey"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default base URL if not already set",
					"if (!pm.environment.get(\"base_url\")) {",
					"    pm.environment.set(\"base_url\", \"http://localhost:5070\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test(\"Response time is reasonable (< 10 seconds)\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"// Global test for content type - handles both JSON and SSE responses",
					"pm.test(\"Response has valid content type (JSON or SSE)\", function () {",
					"    var contentType = pm.response.headers.get(\"Content-Type\");",
					"    pm.expect(contentType).to.satisfy(function(type) {",
					"        return type.includes(\"application/json\") || type.includes(\"text/event-stream\");",
					"    });",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5070",
			"description": "Base URL for the Wikipedia MCP Server API"
		}
	]
}