{
	"info": {
		"_postman_id": "wikipedia-mcp-server-remote-collection",
		"name": "Wikipedia MCP Server - Remote Deployment Testing",
		"description": "Testing collection specifically designed for remote deployments (Render, Railway, etc.). Includes automated environment detection and deployment verification tests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "wikipedia-mcp-remote"
	},
	"item": [
		{
			"name": "üöÄ Deployment Health Checks",
			"item": [
				{
					"name": "Health Check - Basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health check returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Health status is healthy\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.eql(\"Healthy\");",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/wikipedia/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Endpoint - API Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Root endpoint returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains API information\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include(\"Wikipedia MCP Server\");",
									"    pm.expect(response.version).to.exist;",
									"    pm.expect(response.endpoints).to.exist;",
									"});",
									"",
									"pm.test(\"Environment is Production\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.environment).to.eql(\"Production\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîç Wikipedia Search API",
			"item": [
				{
					"name": "Search - Basic Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains search results\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.result).to.exist;",
									"    pm.expect(response.result.pages).to.exist;",
									"    pm.expect(response.result.pages.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Results contain expected fields\", function () {",
									"    const response = pm.response.json();",
									"    const firstPage = response.result.pages[0];",
									"    pm.expect(firstPage.title).to.exist;",
									"    pm.expect(firstPage.excerpt).to.exist;",
									"    pm.expect(firstPage.key).to.exist;",
									"});",
									"",
									"pm.test(\"Response time is acceptable for remote\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"search\",\n    \"params\": {\n        \"query\": \"artificial intelligence\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search - With Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search with limit works\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.result.pages.length).to.be.at.most(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"search\",\n    \"params\": {\n        \"query\": \"quantum computing\",\n        \"limit\": 3\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìÑ Wikipedia Content API",
			"item": [
				{
					"name": "Get Page Sections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sections endpoint works\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.result).to.exist;",
									"    pm.expect(response.result.sections).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"sections\",\n    \"params\": {\n        \"topic\": \"Machine Learning\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Section Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Section content retrieval works\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.result).to.exist;",
									"    pm.expect(response.result.content).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"section_content\",\n    \"params\": {\n        \"topic\": \"Artificial Intelligence\",\n        \"section_title\": \"History\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üß™ MCP Protocol Tests",
			"item": [
				{
					"name": "MCP Initialize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"MCP Initialize works\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.result).to.exist;",
									"    pm.expect(response.result.protocolVersion).to.exist;",
									"    pm.expect(response.result.capabilities).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"initialize\",\n    \"params\": {\n        \"protocolVersion\": \"2024-11-05\",\n        \"capabilities\": {\n            \"tools\": {}\n        },\n        \"clientInfo\": {\n            \"name\": \"Postman Remote Test\",\n            \"version\": \"1.0.0\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				},
				{
					"name": "MCP List Tools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"MCP List Tools works\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.result).to.exist;",
									"    pm.expect(response.result.tools).to.exist;",
									"    pm.expect(response.result.tools.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 2,\n    \"method\": \"tools/list\",\n    \"params\": {}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "‚ö° Performance & Load Tests",
			"item": [
				{
					"name": "Concurrent Search Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Concurrent request handled successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time acceptable for remote deployment\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"pm.test(\"Response contains valid data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.result).to.exist;",
									"    pm.expect(response.result.pages).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"search\",\n    \"params\": {\n        \"query\": \"{{$randomWords}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîí Security & Production Tests",
			"item": [
				{
					"name": "CORS Headers Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CORS headers present\", function () {",
									"    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
									"});",
									"",
									"pm.test(\"Security headers present\", function () {",
									"    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');",
									"    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [
							{
								"key": "Origin",
								"value": "https://example.com"
							},
							{
								"key": "Access-Control-Request-Method",
								"value": "POST"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/wikipedia",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia"
							]
						}
					},
					"response": []
				},
				{
					"name": "HTTPS Redirect Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTPS enforced\", function () {",
									"    pm.expect(pm.request.url.protocol).to.eql('https');",
									"});",
									"",
									"pm.test(\"HSTS header present\", function () {",
									"    const hsts = pm.response.headers.get('Strict-Transport-Security');",
									"    if (hsts) {",
									"        pm.expect(hsts).to.include('max-age');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/wikipedia/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wikipedia",
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-detect environment based on URL",
					"const baseUrl = pm.environment.get('base_url');",
					"if (baseUrl) {",
					"    if (baseUrl.includes('render.com')) {",
					"        console.log('üöÄ Testing on Render deployment');",
					"    } else if (baseUrl.includes('railway.app')) {",
					"        console.log('üöÇ Testing on Railway deployment');",
					"    } else if (baseUrl.includes('localhost')) {",
					"        console.log('üè† Testing local deployment');",
					"    } else {",
					"        console.log('‚òÅÔ∏è Testing cloud deployment');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to ensure we're testing remote deployment",
					"pm.test('Remote deployment accessible', function() {",
					"    const baseUrl = pm.environment.get('base_url');",
					"    pm.expect(baseUrl).to.not.include('localhost');",
					"    pm.expect(baseUrl).to.include('https');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "timestamp",
			"value": "{{$timestamp}}"
		},
		{
			"key": "randomQuery",
			"value": "{{$randomWords}}"
		}
	]
}